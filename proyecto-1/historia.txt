git init: lo usamos para determinar la carpeta en la que vamos a trabajar.

git status: lo usamos para saber si tenemos un archivo añadido o borrado en nuestro proyecto, para saber en la rama en la que estamos y si tenemos commits.

git add: es para añadir un archivo a nuestra rama seguidamente ponemos entre comillas el nombre de nuestro archivo o poner un punto para añadir todos los archios de nuestra carpeta.

git rm: lo usamos para borrar un archivo que hayamos añadido, para eliminarlo por completo de nuestra rama usamosgit rm --cached.

git commit: se usa para añadir un commit a nuestra rama, también podemos ponerle un -m seguidamente ponemos entre comillas nuestro ensaje.

git config: muestra configuraciones de git también podemos usar –list para mostrar la configuración por defecto de nuestro git y si añadimos --show-origin inhales nos muestra las configuraciones guardadas y su ubicación.

git config --global user.name: cambia de manera global el nombre del usuario, seguidamente ponemos entre comillas nuestro nombre.

git config --global user.email: cambia de manera global el email del usuario, seguidamente ponemos entre comillas nuestro nombre.

git log: se usa para ver la historia de nuestros archivos, los commits, el usuario que lo cambió, cuando se realizaron los cambios etc. seguidamente ponemos el nombre de nuestro archivo.

git show <Archivo>: Muestra los cambios que se hicieron en el archivo en el último commit

git diff: Muetra las diferencias de cambios en staying y los cambios que no he guardado (Que están en mi RAM)

git diff <número de commit> <número de commit 2>: Me muestra la diferencia entre ambos

git reset <número de commit> --soft: Volvemos a un commit viejo pero conservamos lo que este en staying (Lo que se haya agregado con "git add")

git reset <número de commit> --hard: Volvemos a un commit viejo pero se borra lo que este en staying (Lo que se haya agregado con "git add") y la historia de commits que haya despues de ese commit del archivo

git checkout <número de commit> <file>: Nos trae (A master) como estaba ese archivo en ese commit y si lo queremos guardar en master solo le damos guardar y lo agregamos a un nuevo commit como normalmente se hace

git checkout <branch>: Nos lleva al HEAD de esa branch